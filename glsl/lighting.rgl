#RGL LIGHTING

struct LightProperties{
//	int _id;
	vec4 ambient;
	vec4 diffuse;
	vec4 specular;

	//float constantAtt;
	//float linearAtt;
	//float quadraticAtt;
	
	float radius;

	vec3 position;

//	vec3 spotDirection;
//	float spotCutOff;
//	float spotExponent;
};

struct Material{
	vec4 ambient;
	vec4 diffuse;
	vec4 specular;
	float shininess;
};

struct LitFrag{
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
};

#define MAX_LIGHTS 64

uniform LightProperties lights[MAX_LIGHTS];
uniform int num_lights;
uniform Material material;

const vec3 globalAmbient = vec3(0.1,0.1,0.1);


LitFrag calcLight(vec3 P,vec3 N,vec3 V){
	vec3 R = reflect(-V,N);
	LitFrag col;
	col.ambient  = vec3(globalAmbient);
	col.diffuse  = vec3(0.0);
	col.specular = vec3(0.0);
	float s,d,att,dist;
	for(int l = 0;l<num_lights&&l<MAX_LIGHTS;l++){
		vec3 L = (M * vec4(lights[l].position,1.0)).xyz - P;
		dist = length(L);
		L /= dist;

		float denom = dist/lights[l].radius;
		att = 1.0 / (denom*denom);
		att = 1.0;
		
		d = clamp(dot(L,N),0.0,1.0);
		s = pow(clamp(dot(L,R),0.0,1.0),material.shininess);
		
		col.ambient  += (lights[l].ambient  * att    ).xyz;
		col.diffuse  += (lights[l].diffuse  * att * d).xyz;
		col.specular += (lights[l].specular * att * s).xyz;
	}
	col.ambient  *= material.ambient;
	col.diffuse  *= material.diffuse;
	col.specular *= material.specular;
	return col;
}